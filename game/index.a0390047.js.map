{"mappings":"AKKO,MAAM,EAAU,CACrB,KAAM,OACN,QAAS,SACX,CDNO,OAAM,EACX,MAAQ,EAAE,AAAC,AAEX,CAAA,SAAS,CAAK,CAAE,CACd,GAAI,ACN+B,IDM/B,EAAM,MAAM,CAA8B,CAC5C,IAAI,CAAC,KAAK,CAAG,EACb,MACF,CAEA,MAAM,AAAI,MACR,4CAAqE,EAAM,MAAM,EAAE,CAEvF,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,kBAAmB,CACjB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAS,CAAC,EAAK,QAAQ,GACjD,CACF,CEvBO,MAAM,EACX,uBAAuB,CAAiB,CAAE,CACxC,IAAM,EACJ,IAAI,CAAC,0BAA0B,CAAC,GAClC,OAAO,IAAI,CAAC,6BAA6B,CAAC,CACxC,kBAAA,EACA,mBAAA,CACF,EACF,CAEA,gCAAgC,CAAiB,CAAE,CACjD,OAAO,EAAkB,MAAM,CAAC,CAAC,EAAkB,EAAQ,IAElD,IAAI,KADO,EAAO,gBAAgB,GAAK,CAAC,EAAM,CAAG,EAAE,CAChB,CACzC,EAAE,CACP,CAEA,8BAA8B,CAAA,kBAAE,CAAiB,CAAA,mBAAE,CAAkB,CAAE,CAAE,CACvE,IAAM,EACJ,IAAI,CAAC,+BAA+B,CAAC,GAEjC,EACJ,CAAsB,CACpB,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAuB,MAAM,CAAG,CAAA,GAC7D,CAEG,EACJ,EAAmB,MAAM,CAAG,GAC5B,EAAmB,MAAM,CAAC,CAAC,EAAU,IAC5B,GAAU,SAAW,EAAY,QAAQ,CAC5C,EACA,GAGR,OAAO,EACH,EAAwB,uBAAuB,CAC/C,CACN,CAEA,2BAA2B,CAAiB,CAAE,CAC5C,IAAM,EAA0B,EAAE,CA4BlC,SAAS,EAAe,EAAW,CAAA,CAAK,EACtC,IAAM,EAAuB,EAAE,CAoC/B,MAnCA,AAoDN,CAAA,SAAsB,CAAiB,EACrC,IAAM,EAAO,EAAE,CAaf,OAXA,EAAkB,OAAO,CAAC,AAAC,IAGzB,AAFuB,EAAO,QAAQ,GAEvB,OAAO,CAAC,CAAC,EAAM,KAC5B,GAAI,MAAM,OAAO,CAAC,CAAI,CAAC,EAAU,EAC/B,OAAO,CAAI,CAAC,EAAU,CAAC,IAAI,CAAC,EAE9B,CAAA,CAAI,CAAC,EAAU,CAAG,CAAC,EAAK,AAC1B,EACF,GAEO,EAAK,OAAO,EACrB,CAAA,EAnEmB,GAAmB,OAAO,CAAC,CAAC,EAAK,EAAU,KAGtD,GAFyB,EAAI,IAAI,CAAC,AAAC,GAAS,CAAC,EAAK,QAAQ,IAEpC,CACpB,IAAM,EAAc,EAAW,EAAI,CAAO,CAAC,EAAW,EAAE,CAAG,KAAA,EAErD,EAAa,EAAW,IAAI,EAAI,CAAC,OAAO,GAAK,EAC/C,EAAkB,EAEtB,EAAW,OAAO,CAAC,CAAC,EAAM,EAAW,KACnC,IAAM,EAAiB,EAAK,aAAa,GACnC,EAAW,EAAK,QAAQ,GAExB,EAAoB,EAAS,MAAM,CAAG,EAAI,EAC1C,EAAqB,CAAA,GACvB,CAAW,CAAC,EAAW,EAAoB,EAAU,CAAC,QAAQ,GAG9D,EACF,KACS,CAAC,GAAY,EAAkB,GAAK,GAC7C,EAAqB,IAAI,CAAC,CACxB,SAAU,EACV,wBAAyB,EACrB,EACA,CACN,GAGA,EAAkB,EAEtB,EACF,CACF,GAEO,CACT,CAQA,OAxEA,EAAkB,OAAO,CAAC,CAAC,EAAQ,KAGjC,GAFyB,EAAO,gBAAgB,GAE1B,CACpB,IAAM,EAAwB,IAAI,EAAO,QAAQ,GAAG,CAAC,OAAO,GACxD,EAAkB,EAEtB,EAAsB,OAAO,CAAC,AAAC,IAC7B,IAAM,EAAiB,EAAK,aAAa,GACnC,EAAW,EAAK,QAAQ,GAE1B,EACF,KACS,CAAC,GAAY,EAAkB,GACxC,EAAwB,IAAI,CAAC,CAC3B,SAAU,EACV,wBAAyB,CAC3B,GAGA,EAAkB,EAEtB,EACF,CACF,GA0CA,QAAQ,GAAG,CAAC,CACV,QAAS,EACT,KAAM,IACN,aAAc,EAAe,CAAA,EAC/B,GAEO,IACF,KACA,OACA,EAAe,CAAA,GACnB,AACH,CACF,CCtHO,MAAM,EACX,MAAQ,EAAW,KAAK,AAAC,AACzB,CAAA,UAAY,CAAA,CAAM,AAElB,CAAA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,cAAe,CACb,OAAO,IAAI,CAAC,SAAS,AACvB,CAEA,UAAW,CACT,OAAO,CAAe,CAAC,IAAI,CAAC,KAAK,CAAC,AACpC,CAEA,aAAc,CACZ,IAAI,CAAC,KAAK,CAAG,EAAW,gBAAgB,AAC1C,CAEA,YAAa,CACX,IAAI,CAAC,KAAK,CAAG,EAAW,KAAK,CAC7B,IAAI,CAAC,SAAS,CAAG,CAAA,CACnB,CAEA,cAAe,CACb,IAAI,CAAC,SAAS,CAAG,CAAA,CACnB,CAEA,WAAW,CAAW,CAAE,CACtB,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,UAAW,CACT,OACE,IAAI,CAAC,KAAK,GAAK,EAAW,MAAM,EAAI,IAAI,CAAC,KAAK,GAAK,EAAW,OAAO,AAEzE,CAEA,eAAgB,CACd,OAAO,IAAI,CAAC,QAAQ,KAAO,EAAW,MAAM,AAC9C,CACF,CAEO,MAAM,EAAa,CACxB,MAAO,QACP,OAAQ,AAAA,EAAQ,IAAI,CACpB,QAAS,AAAA,EAAQ,OAAO,CACxB,iBAAkB,mBAClB,kBAAmB,mBACrB,EAEa,EAAkB,CAC7B,CAAC,EAAW,KAAK,CAAC,CAAE,UACpB,CAAC,EAAW,MAAM,CAAC,CAAE,UACrB,CAAC,EAAW,OAAO,CAAC,CAAE,UACtB,CAAC,EAAW,gBAAgB,CAAC,CAAE,UAC/B,CAAC,EAAW,iBAAiB,CAAC,CAAE,SAClC,CJjDO,OAAM,EACX,MAAQ,IAAK,AACb,CAAA,OAAS,IAAK,AACd,CAAA,QAAU,EAAE,AAAC,AACb,CAAA,SAAW,AAAA,EAAQ,IAAI,AAAC,AACxB,CAAA,YAAc,IAAK,AAEnB,aAAY,CAAA,IAAE,CAAG,CAAA,MAAE,CAAK,CAAA,OAAE,CAAM,CAAE,CAAE,CAClC,IAAI,CAAC,GAAG,CAAG,EACX,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,EACd,IAAI,CAAC,mBAAmB,CAAG,EAAE,CAC7B,IAAI,CAAC,yBAAyB,CAAG,EAAE,CACnC,IAAI,CAAC,aAAa,CAAG,IAAI,EACzB,IAAI,CAAC,OAAO,CAAG,MExBS,GFyBrB,IAAI,CAAC,MACL,GAAG,CAAC,IAAM,IAAI,GACjB,IAAI,CAAC,oBAAoB,EAC3B,CAEA,aAAc,CACZ,OAAO,IAAI,CAAC,QAAQ,AACtB,CAEA,iBAAiB,CAAQ,CAAE,CACzB,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,EACtC,CAEA,sBAAuB,CACrB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,AAAC,IACpB,EAAI,QAAQ,CACV,ME1C+B,GF2C5B,IAAI,CAAC,MACL,GAAG,CAAC,IAAM,IAAI,GAErB,EACF,CAEA,gBAAgB,CAAK,CAAE,CACrB,OACE,GAAA,EEjDqB,KFmDpB,CAAA,AAAU,IAAV,EAAc,EAAI,AElDE,EFkDY,CAAA,CAErC,CAEA,0BAA0B,CAAS,CAAE,CAKnC,OAJ0B,KAAK,KAAK,CAClC,EAAa,CAAA,IAAI,CAAC,KAAK,CE1DD,CF0De,EAIzC,CAEA,aAAc,CACZ,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAG,EAAG,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,EAChD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAK,KAGzB,AAFqB,EAAI,QAAQ,GAEpB,OAAO,CAAC,CAAC,EAAM,KAC1B,IAAI,CAAC,GAAG,CAAC,IAAI,GACb,IAAI,CAAC,GAAG,CAAC,SAAS,GAClB,IAAI,CAAC,GAAG,CAAC,GAAG,CACV,IAAI,CAAC,eAAe,CAAC,GACrB,IAAI,CAAC,eAAe,CAAC,GEzEJ,KF2EjB,EACA,EAAI,KAAK,EAAE,EAGb,IAAI,CAAC,GAAG,CAAC,SAAS,CAAG,EAAK,QAAQ,GAE9B,EAAK,YAAY,KACnB,IAAI,CAAC,GAAG,CAAC,WAAW,CAAG,UACvB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAG,EACrB,IAAI,CAAC,GAAG,CAAC,MAAM,IAGjB,IAAI,CAAC,GAAG,CAAC,IAAI,GACb,IAAI,CAAC,GAAG,CAAC,SAAS,GAClB,IAAI,CAAC,GAAG,CAAC,OAAO,EAClB,EACF,GAEA,OAAO,qBAAqB,CAAC,IAAM,IAAI,CAAC,WAAW,GACrD,CAEA,gBAAgB,CAAA,UAAE,CAAS,CAAE,CAAE,CAC7B,IAAM,EAAoB,IAAI,CAAC,yBAAyB,CAAC,GACzD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAQ,IACrB,EAAO,QAAQ,GAAG,OAAO,CAAC,AAAC,IAChC,GACE,IAAU,GACV,CAAC,EAAK,QAAQ,IACd,IAAI,CAAC,WAAW,KAAO,AAAA,EAAQ,IAAI,EACnC,CAAC,IAAI,CAAC,WAAW,CAEjB,OAAO,EAAK,WAAW,GAGpB,EAAK,QAAQ,IAChB,EAAK,UAAU,EAEnB,GAEJ,CAEA,uBAAwB,CACtB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,AAAC,IACpB,EAAO,QAAQ,GAAG,OAAO,CAAC,AAAC,IACpB,EAAK,QAAQ,IAChB,EAAK,UAAU,EAEnB,EACF,EACF,CAEA,sBAAuB,CACrB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,AAAC,IACpB,EAAO,QAAQ,GAAG,OAAO,CAAC,AAAC,IACzB,EAAK,UAAU,EACjB,EACF,EACF,CAEA,kBAAkB,CAAA,cAAE,CAAa,CAAE,CAAE,CACnC,IAAI,CAAC,QAAQ,CACX,IAAkB,AAAA,EAAQ,IAAI,CAAG,AAAA,EAAQ,OAAO,CAAG,AAAA,EAAQ,IAAI,CAEjE,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,AAAC,GACtC,EAAS,CAAE,YAAa,IAAI,CAAC,QAAQ,AAAC,GAE1C,CAEA,KAAK,CAAA,YAAE,CAAW,CAAA,YAAE,CAAW,CAAE,CAAE,CACjC,GAAI,IAAI,CAAC,WAAW,CAAE,OAEtB,IAAM,EAAgB,IAAI,CAAC,OAAO,CAAC,EAAY,CAC5C,QAAQ,GACR,QAAQ,CAAC,AAAC,GAAS,CAAC,EAAK,QAAQ,IAEpC,GAAI,CAAC,EACH,MAAM,MAAM,+BAGd,EAAc,UAAU,CAAC,GACzB,IAAI,CAAC,eAAe,GACpB,IAAI,CAAC,iBAAiB,CAAC,CAAE,cAAe,CAAY,GACpD,OAAO,UAAU,CAAC,IAAM,IAAI,CAAC,gBAAgB,GAAI,KACnD,CAEA,kBAAmB,CACb,IAAI,CAAC,WAAW,KAAO,AAAA,EAAQ,OAAO,EAAK,IAAI,CAAC,WAAW,EAC7D,IAAI,CAAC,IAAI,CAAC,CACR,YAAa,AAAA,EAAQ,OAAO,CAC5B,YAAa,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CACrE,EAEJ,CAEA,iBAAkB,CAChB,IAAM,EAAU,EAAE,CACZ,EAAO,EAAE,CACT,EAAkB,EAAE,CACpB,EAAe,EAAE,CAEvB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,AAAC,IACpB,IAAM,EAAiB,EAAO,QAAQ,GACtC,EAAQ,IAAI,CAAC,GAEb,EAAe,OAAO,CAAC,CAAC,EAAM,KAC5B,GAAI,MAAM,OAAO,CAAC,CAAI,CAAC,EAAU,EAC/B,OAAO,CAAI,CAAC,EAAU,CAAC,IAAI,CAAC,EAE9B,CAAA,CAAI,CAAC,EAAU,CAAG,CAAC,EAAK,AAC1B,EACF,GAEA,EAAQ,OAAO,CAAC,CAAC,EAAQ,KACvB,EAAO,OAAO,CAAC,CAAC,EAAM,KACpB,GAAI,MAAM,OAAO,CAAC,CAAe,CAAC,EAAY,EAAY,EACxD,OAAO,CAAe,CAAC,EAAY,EAAY,CAAC,IAAI,CAAC,EACA,MAAA,GAA5C,CAAe,CAAC,EAAY,EAAY,EACjD,CAAA,CAAe,CAAC,EAAY,EAAY,CAAG,CAAC,EAAK,AAAA,CAErD,EACF,GAEA,EAAQ,OAAO,GAAG,OAAO,CAAC,CAAC,EAAK,KAC9B,EAAI,OAAO,CAAC,CAAC,EAAM,KACjB,GAAI,MAAM,OAAO,CAAC,CAAY,CAAC,EAAY,EAAS,EAClD,OAAO,CAAY,CAAC,EAAY,EAAS,CAAC,IAAI,CAAC,EACA,MAAA,GAAtC,CAAY,CAAC,EAAY,EAAS,EAC3C,CAAA,CAAY,CAAC,EAAY,EAAS,CAAG,CAAC,EAAK,AAAA,CAE/C,EACF,GAEA,IAAI,CAAC,WAAW,CAAC,GACjB,IAAI,CAAC,WAAW,CAAC,GACjB,IAAI,CAAC,WAAW,CAAC,GACjB,IAAI,CAAC,WAAW,CAAC,EACnB,CAEA,YAAY,CAAI,CAAE,CAChB,GAAI,IAAI,CAAC,WAAW,CAAE,OAEtB,IAAM,EAAW,CACf,CAAC,AAAA,EAAQ,IAAI,CAAC,CAAE,EAAE,CAClB,CAAC,AAAA,EAAQ,OAAO,CAAC,CAAE,EAAE,AACvB,EAEA,EAAK,OAAO,CAAC,AAAC,IACZ,EAAM,OAAO,CAAC,AAAC,IACT,IAAI,CAAC,WAAW,GAEhB,EAAK,QAAQ,KAAO,AAAA,EAAQ,IAAI,EAClC,CAAQ,CAAC,AAAA,EAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,GAC5B,CAAQ,CAAC,AAAA,EAAQ,OAAO,CAAC,CAAG,EAAE,GACrB,EAAK,QAAQ,KAAO,AAAA,EAAQ,OAAO,CAC5C,CAAQ,CAAC,AAAA,EAAQ,OAAO,CAAC,CAAC,IAAI,CAAC,GAG/B,CAAQ,CAAC,AAAA,EAAQ,OAAO,CAAC,CAAG,EAAE,CAC9B,CAAQ,CAAC,AAAA,EAAQ,IAAI,CAAC,CAAG,EAAE,EAG7B,OAAO,OAAO,CAAC,GAAU,OAAO,CAAC,CAAC,CAAC,EAAK,EAAM,KACxC,IAAI,CAAC,WAAW,EAEhB,EAAM,MAAM,EAAI,IAClB,EAAM,OAAO,CAAC,AAAC,GAAM,EAAE,YAAY,IACnC,IAAI,CAAC,WAAW,CAAC,CAAE,OAAQ,CAAI,GAEnC,GACF,GAEA,CAAQ,CAAC,AAAA,EAAQ,IAAI,CAAC,CAAG,EAAE,CAC3B,CAAQ,CAAC,AAAA,EAAQ,OAAO,CAAC,CAAG,EAAE,AAChC,EACF,CAEA,WAAW,CAAQ,CAAE,CACnB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAChC,CAEA,YAAY,CAAA,OAAE,CAAM,CAAE,CAAE,CACtB,IAAI,CAAC,WAAW,CAAG,EACnB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,AAAC,GAAa,EAAS,CAAE,OAAA,CAAO,GACnE,CAEA,cAAe,CACb,IAAI,CAAC,oBAAoB,GACzB,IAAI,CAAC,WAAW,CAAG,KACnB,IAAI,CAAC,QAAQ,CAAG,AAAA,EAAQ,IAAI,AAC9B,CACF,CKzQO,MAAM,EACX,YAAY,CAAA,YAAE,CAAW,CAAA,MAAE,CAAK,CAAE,CAAE,CAClC,IAAI,CAAC,WAAW,CAAG,EACnB,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,EAAE,CAAG,CACR,iBAAkB,SAAS,aAAa,CAAC,sBACzC,oBAAqB,SAAS,aAAa,CAAC,yBAC5C,iBAAkB,SAAS,aAAa,CAAC,uBACzC,oBAAqB,SAAS,aAAa,CAAC,0BAC5C,YAAa,SAAS,aAAa,CAAC,oBACpC,aAAc,SAAS,aAAa,CAAC,6BACrC,eAAgB,SAAS,aAAa,CAAC,oBACzC,CACF,CAEA,gBAAiB,CACf,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAS,KAC7C,IAAI,CAAC,KAAK,CAAC,YAAY,GACvB,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,iBACvC,EACF,CAEA,kBAAmB,CACjB,IAAI,CAAC,WAAW,CAAC,KAAK,GACtB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,GAAG,IAAS,IAAI,CAAC,WAAW,IAAI,IAC9D,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,GAAG,IAAS,IAAI,CAAC,UAAU,IAAI,IAC5D,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,GAAG,IAAS,IAAI,CAAC,WAAW,IAAI,GACjE,CAEA,YAAY,CAAA,UAAE,CAAS,CAAA,UAAE,CAAS,CAAE,CAAE,CACpC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAE,UAAA,CAAU,EACzC,CAEA,YAAa,CACX,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAClC,CAEA,YAAY,CAAA,UAAE,CAAS,CAAA,UAAE,CAAS,CAAE,CAAE,CAChC,IAAI,CAAC,KAAK,CAAC,WAAW,KAAO,AAAA,EAAQ,IAAI,EAC3C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CACd,YAAa,AAAA,EAAQ,IAAI,CACzB,YAAa,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,EACpD,EAEJ,CAEA,eAAgB,CACd,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAA,OAAE,CAAM,CAAE,IAC/B,QAAQ,GAAG,CAAC,CAAE,OAAA,CAAO,GACrB,IAAI,EAAY,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,WAAW,CACjD,EAAe,CAAC,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,WAAW,CAEvD,IAAW,AAAA,EAAQ,IAAI,GACzB,IACA,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,WAAW,CAAG,YAGnC,IAAW,AAAA,EAAQ,OAAO,GAC5B,IACA,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,WAAW,CAAG,gBAGnC,IAAW,AAAA,EAAQ,IAAI,EAAI,IAAW,AAAA,EAAQ,OAAO,EACvD,CAAA,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,WAAW,CAAG,MADvC,EAIA,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,WAAW,CAAG,EACvC,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,WAAW,CAAG,EAC1C,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,iBACpC,EACF,CAEA,eAAgB,CACd,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAA,YAAE,CAAW,CAAE,IAC1C,GAAI,IAAgB,AAAA,EAAQ,IAAI,CAAE,CAChC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,cACvC,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,SAAS,CAAC,MAAM,CAAC,cAE7C,MACF,CAEA,GAAI,IAAgB,AAAA,EAAQ,OAAO,CAAE,CACnC,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,cAC1C,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,cAE1C,MACF,CAEA,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,SAAS,CAAC,MAAM,CAAC,cAC7C,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,aAC5C,EACF,CACF,CC9FO,MAAM,EACX,mBAAqB,EAAE,AAAC,AACxB,CAAA,kBAAoB,EAAE,AAAC,AACvB,CAAA,oBAAsB,EAAE,AAAC,AAEzB,aAAY,CAAA,IAAE,CAAG,CAAA,OAAE,CAAM,CAAE,CAAE,CAC3B,IAAI,CAAC,GAAG,CAAG,EACX,IAAI,CAAC,MAAM,CAAG,CAChB,CAEA,OAAQ,CACN,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,eAAe,EACtB,CAEA,YAAY,CAAQ,CAAE,CACpB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAC/B,CAEA,WAAW,CAAQ,CAAE,CACnB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAC9B,CAEA,aAAa,CAAQ,CAAE,CACrB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAChC,CAEA,gBAAiB,CACf,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,YAAa,AAAC,IACzC,IAAM,EAAY,EAAM,OAAO,CACzB,EAAY,EAAM,OAAO,CAE/B,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,AAAC,GAC/B,EAAS,CAAE,UAAA,EAAW,UAAA,CAAU,GAEpC,EACF,CAEA,eAAgB,CACd,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAY,AAAC,IACxC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,AAAC,GAAa,IAC/C,EACF,CAEA,iBAAkB,CAChB,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAS,AAAC,IACrC,IAAM,EAAY,EAAM,OAAO,CACzB,EAAY,EAAM,OAAO,CAE/B,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,AAAC,GAChC,EAAS,CAAE,UAAA,EAAW,UAAA,CAAU,GAEpC,EACF,CACF,CPnDO,MAAM,EACX,OAAS,IAAK,AACd,CAAA,QAAU,IAAK,AACf,CAAA,MAAQ,IAAK,AACb,CAAA,WAAa,IAAK,AAElB,aAAY,CAAM,CAAE,CAClB,IAAI,CAAC,MAAM,CAAG,EACd,IAAI,CAAC,GAAG,CAAG,EAAO,UAAU,CAAC,MAC7B,IAAI,CAAC,KAAK,CAAG,IAAI,EAAM,CACrB,IAAK,IAAI,CAAC,GAAG,CACb,MAAO,EAAO,KAAK,CACnB,OAAQ,EAAO,MAAM,AACvB,GACA,IAAI,CAAC,WAAW,CAAG,IAAI,EAAY,CACjC,IAAK,IAAI,CAAC,GAAG,CACb,OAAQ,IAAI,CAAC,MAAM,AACrB,GACA,IAAI,CAAC,UAAU,CAAG,IAAI,EAAW,CAC/B,YAAa,IAAI,CAAC,WAAW,CAC7B,MAAO,IAAI,CAAC,KAAK,AACnB,EACF,CAEA,MAAO,CACL,OAAO,qBAAqB,CAAC,KAC3B,IAAI,CAAC,KAAK,CAAC,WAAW,EACxB,GACA,IAAI,CAAC,UAAU,CAAC,gBAAgB,GAChC,IAAI,CAAC,UAAU,CAAC,aAAa,GAC7B,IAAI,CAAC,UAAU,CAAC,aAAa,GAC7B,IAAI,CAAC,UAAU,CAAC,cAAc,EAChC,CACF,CDnCA,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,IAAI,EAAK,SAAS,aAAa,CAAC,iBAAiB,IAAI,EACvD","sources":["<anon>","src/app/index.js","src/app/Game.js","src/app/Board.js","src/app/Column.js","src/app/constants.js","src/app/MachinePlayer.js","src/app/Spot.js","src/app/Controller.js","src/app/MouseAction.js"],"sourcesContent":["const $1720a16224a16edd$export$206e52437fb3b7a1 = 6;\nconst $1720a16224a16edd$export$850c5004c37708dd = 7;\nconst $1720a16224a16edd$export$304fffcfb4b8c0b3 = 43.5;\nconst $1720a16224a16edd$export$ae361f449eaf0261 = 8;\nconst $1720a16224a16edd$export$7108827f6df32fda = {\n    USER: \"user\",\n    MACHINE: \"machine\"\n};\n\n\nclass $73826244d9832cf4$export$816b5d811295e6bc {\n    spots = [];\n    addSpots(spots) {\n        if (spots.length === (0, $1720a16224a16edd$export$206e52437fb3b7a1)) {\n            this.spots = spots;\n            return;\n        }\n        throw new Error(`Spots should be equal to ${(0, $1720a16224a16edd$export$206e52437fb3b7a1)}. It was given ${spots.length}`);\n    }\n    getSpots() {\n        return this.spots;\n    }\n    hasAvailableSpot() {\n        return this.spots.some((spot)=>!spot.hasOwner());\n    }\n}\n\n\n\nclass $6997156f6ef9e35c$export$276a2e77c48b6cc8 {\n    getColumnIndexToPlayIn(boardColumnsState) {\n        const bestDefensiveMoves = this._processBestDefensiveMoves(boardColumnsState);\n        return this._calculateColumnIndextoPlayIn({\n            boardColumnsState: boardColumnsState,\n            bestDefensiveMoves: bestDefensiveMoves\n        });\n    }\n    _getColumnIndexesPossibleToPlay(boardColumnsState) {\n        return boardColumnsState.reduce((availableIndexes, column, index)=>{\n            const available = column.hasAvailableSpot() ? [\n                index\n            ] : [];\n            return [\n                ...availableIndexes,\n                ...available\n            ];\n        }, []);\n    }\n    _calculateColumnIndextoPlayIn({ boardColumnsState: boardColumnsState, bestDefensiveMoves: bestDefensiveMoves }) {\n        const columnIndexesAvailable = this._getColumnIndexesPossibleToPlay(boardColumnsState);\n        const randomPosition = columnIndexesAvailable[Math.round(Math.random() * (columnIndexesAvailable.length - 1))];\n        const bestDefensiveSingleMove = bestDefensiveMoves.length > 0 && bestDefensiveMoves.reduce((bestMove, currentMove)=>{\n            return bestMove?.sequence > currentMove.sequence ? bestMove : currentMove;\n        });\n        return bestDefensiveSingleMove ? bestDefensiveSingleMove.chosenMoveToColumnIndex : randomPosition;\n    }\n    _processBestDefensiveMoves(boardColumnsState) {\n        const opponentColumnSequences = [];\n        boardColumnsState.forEach((column, columnIndex)=>{\n            const hasAvailableSpot = column.hasAvailableSpot();\n            if (hasAvailableSpot) {\n                const spotsOrderedDownToTop = [\n                    ...column.getSpots()\n                ].reverse();\n                let currentSequence = 0;\n                spotsOrderedDownToTop.forEach((spot)=>{\n                    const isOpponentSpot = spot.isPlayerOwner();\n                    const hasOwner = spot.hasOwner();\n                    if (isOpponentSpot) currentSequence++;\n                    else if (!hasOwner && currentSequence > 1) {\n                        opponentColumnSequences.push({\n                            sequence: currentSequence,\n                            chosenMoveToColumnIndex: columnIndex\n                        });\n                        currentSequence = 0;\n                    } else currentSequence = 0;\n                });\n            }\n        });\n        function getRowSequence(reversed = false) {\n            const opponentRowSequences = [];\n            $6997156f6ef9e35c$var$getBoardRows(boardColumnsState).forEach((row, rowIndex, allRows)=>{\n                const hasAvailableSpot = row.some((spot)=>!spot.hasOwner());\n                if (hasAvailableSpot) {\n                    const previousRow = rowIndex > 0 ? allRows[rowIndex - 1] : undefined;\n                    const spotsOnRow = reversed ? [\n                        ...row\n                    ].reverse() : row;\n                    let currentSequence = 0;\n                    spotsOnRow.forEach((spot, spotIndex, allSpots)=>{\n                        const isOpponentSpot = spot.isPlayerOwner();\n                        const hasOwner = spot.hasOwner();\n                        const reversedSpotIndex = allSpots.length - 1 - spotIndex;\n                        const spotBellowHasOwner = previousRow ? previousRow[reversed ? reversedSpotIndex : spotIndex].hasOwner() : true;\n                        if (isOpponentSpot) currentSequence++;\n                        else if (!hasOwner && currentSequence > 1 && spotBellowHasOwner) {\n                            opponentRowSequences.push({\n                                sequence: currentSequence,\n                                chosenMoveToColumnIndex: reversed ? reversedSpotIndex : spotIndex\n                            });\n                            currentSequence = 0;\n                        } else currentSequence = 0;\n                    });\n                }\n            });\n            return opponentRowSequences;\n        }\n        console.log({\n            columns: opponentColumnSequences,\n            rows: getRowSequence(),\n            rowsReversed: getRowSequence(true)\n        });\n        return [\n            ...opponentColumnSequences,\n            ...getRowSequence(),\n            ...getRowSequence(true)\n        ];\n    }\n}\nfunction $6997156f6ef9e35c$var$getBoardRows(boardColumnsState) {\n    const rows = [];\n    boardColumnsState.forEach((column)=>{\n        const spotsForColumn = column.getSpots();\n        spotsForColumn.forEach((spot, spotIndex)=>{\n            if (Array.isArray(rows[spotIndex])) return rows[spotIndex].push(spot);\n            rows[spotIndex] = [\n                spot\n            ];\n        });\n    });\n    return rows.reverse();\n}\n\n\n\nclass $9be380de04799806$export$4ff9fa6d345bfd0b {\n    state = $9be380de04799806$export$f242c4d601bf30ed.EMPTY;\n    isMatched = false;\n    getState() {\n        return this.state;\n    }\n    getIsMatched() {\n        return this.isMatched;\n    }\n    getColor() {\n        return $9be380de04799806$export$b45ddc5a8abfe90d[this.state];\n    }\n    preActivate() {\n        this.state = $9be380de04799806$export$f242c4d601bf30ed.PLAYER_PREACTIVE;\n    }\n    inactivate() {\n        this.state = $9be380de04799806$export$f242c4d601bf30ed.EMPTY;\n        this.isMatched = false;\n    }\n    setAsMatched() {\n        this.isMatched = true;\n    }\n    setOwnedBy(whichPlayer) {\n        this.state = whichPlayer;\n    }\n    hasOwner() {\n        return this.state === $9be380de04799806$export$f242c4d601bf30ed.PLAYER || this.state === $9be380de04799806$export$f242c4d601bf30ed.MACHINE;\n    }\n    isPlayerOwner() {\n        return this.getState() === $9be380de04799806$export$f242c4d601bf30ed.PLAYER;\n    }\n}\nconst $9be380de04799806$export$f242c4d601bf30ed = {\n    EMPTY: \"empty\",\n    PLAYER: (0, $1720a16224a16edd$export$7108827f6df32fda).USER,\n    MACHINE: (0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE,\n    PLAYER_PREACTIVE: \"player_preactive\",\n    MACHINE_PREACTIVE: \"machine_preactive\"\n};\nconst $9be380de04799806$export$b45ddc5a8abfe90d = {\n    [$9be380de04799806$export$f242c4d601bf30ed.EMPTY]: \"#c3c3c3\",\n    [$9be380de04799806$export$f242c4d601bf30ed.PLAYER]: \"#FF9F1C\",\n    [$9be380de04799806$export$f242c4d601bf30ed.MACHINE]: \"#E71D36\",\n    [$9be380de04799806$export$f242c4d601bf30ed.PLAYER_PREACTIVE]: \"#FFD192\",\n    [$9be380de04799806$export$f242c4d601bf30ed.MACHINE_PREACTIVE]: \"#FF94A1\"\n};\n\n\nclass $d78f81c7cf208403$export$dc537a3a3893548e {\n    width = null;\n    height = null;\n    columns = [];\n    playTurn = (0, $1720a16224a16edd$export$7108827f6df32fda).USER;\n    matchResult = null;\n    constructor({ ctx: ctx, width: width, height: height }){\n        this.ctx = ctx;\n        this.width = width;\n        this.height = height;\n        this.onMatchEndCallbacks = [];\n        this.onPlayTurnChangeCallbacks = [];\n        this.machinePlayer = new (0, $6997156f6ef9e35c$export$276a2e77c48b6cc8)();\n        this.columns = Array((0, $1720a16224a16edd$export$850c5004c37708dd)).fill(null).map(()=>new (0, $73826244d9832cf4$export$816b5d811295e6bc)());\n        this.fillColumnsWithSpots();\n    }\n    getPlayTurn() {\n        return this.playTurn;\n    }\n    onPlayTurnChange(callback) {\n        this.onPlayTurnChangeCallbacks.push(callback);\n    }\n    fillColumnsWithSpots() {\n        this.columns.forEach((col)=>{\n            col.addSpots(Array((0, $1720a16224a16edd$export$206e52437fb3b7a1)).fill(null).map(()=>new (0, $9be380de04799806$export$4ff9fa6d345bfd0b)()));\n        });\n    }\n    getSpotPosition(index) {\n        return index * (0, $1720a16224a16edd$export$304fffcfb4b8c0b3) * 2 + (0, $1720a16224a16edd$export$304fffcfb4b8c0b3) + (index === 0 ? 0 : (0, $1720a16224a16edd$export$ae361f449eaf0261) * index);\n    }\n    getColumnIndexByPositionX(positionX) {\n        const columnActiveIndex = Math.floor(positionX / (this.width / (0, $1720a16224a16edd$export$850c5004c37708dd)));\n        return columnActiveIndex;\n    }\n    renderBoard() {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n        this.columns.forEach((col, columnIndex)=>{\n            const currentSpots = col.getSpots();\n            currentSpots.forEach((spot, spotIndex)=>{\n                this.ctx.save();\n                this.ctx.beginPath();\n                this.ctx.arc(this.getSpotPosition(columnIndex), this.getSpotPosition(spotIndex), (0, $1720a16224a16edd$export$304fffcfb4b8c0b3), 0, 2 * Math.PI);\n                this.ctx.fillStyle = spot.getColor();\n                if (spot.getIsMatched()) {\n                    this.ctx.strokeStyle = \"#000000\";\n                    this.ctx.lineWidth = 4;\n                    this.ctx.stroke();\n                }\n                this.ctx.fill();\n                this.ctx.closePath();\n                this.ctx.restore();\n            });\n        });\n        window.requestAnimationFrame(()=>this.renderBoard());\n    }\n    setColumnActive({ positionX: positionX }) {\n        const columnActiveIndex = this.getColumnIndexByPositionX(positionX);\n        this.columns.forEach((column, index)=>{\n            return column.getSpots().forEach((spot)=>{\n                if (index === columnActiveIndex && !spot.hasOwner() && this.getPlayTurn() === (0, $1720a16224a16edd$export$7108827f6df32fda).USER && !this.matchResult) return spot.preActivate();\n                if (!spot.hasOwner()) spot.inactivate();\n            });\n        });\n    }\n    setAllColumnsInactive() {\n        this.columns.forEach((column)=>{\n            column.getSpots().forEach((spot)=>{\n                if (!spot.hasOwner()) spot.inactivate();\n            });\n        });\n    }\n    resetAllColumnsSpots() {\n        this.columns.forEach((column)=>{\n            column.getSpots().forEach((spot)=>{\n                spot.inactivate();\n            });\n        });\n    }\n    setNextPlayerTurn({ currentPlayer: currentPlayer }) {\n        this.playTurn = currentPlayer === (0, $1720a16224a16edd$export$7108827f6df32fda).USER ? (0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE : (0, $1720a16224a16edd$export$7108827f6df32fda).USER;\n        this.onPlayTurnChangeCallbacks.forEach((callback)=>callback({\n                currentTurn: this.playTurn\n            }));\n    }\n    play({ whichPlayer: whichPlayer, columnIndex: columnIndex }) {\n        if (this.matchResult) return;\n        const availableSpot = this.columns[columnIndex].getSpots().findLast((spot)=>!spot.hasOwner());\n        if (!availableSpot) throw Error(\"Cannot play in this column.\");\n        availableSpot.setOwnedBy(whichPlayer);\n        this.findWinnerMatch();\n        this.setNextPlayerTurn({\n            currentPlayer: whichPlayer\n        });\n        window.setTimeout(()=>this.maybeMachinePlay(), 1500);\n    }\n    maybeMachinePlay() {\n        if (this.getPlayTurn() === (0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE && !this.matchResult) this.play({\n            whichPlayer: (0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE,\n            columnIndex: this.machinePlayer.getColumnIndexToPlayIn(this.columns)\n        });\n    }\n    findWinnerMatch() {\n        const columns = [];\n        const rows = [];\n        const diagonalColumns = [];\n        const diagonalRows = [];\n        this.columns.forEach((column)=>{\n            const spotsForColumn = column.getSpots();\n            columns.push(spotsForColumn);\n            spotsForColumn.forEach((spot, spotIndex)=>{\n                if (Array.isArray(rows[spotIndex])) return rows[spotIndex].push(spot);\n                rows[spotIndex] = [\n                    spot\n                ];\n            });\n        });\n        columns.forEach((column, columnIndex)=>{\n            column.forEach((spot, spotIndex)=>{\n                if (Array.isArray(diagonalColumns[spotIndex + columnIndex])) return diagonalColumns[spotIndex + columnIndex].push(spot);\n                else if (diagonalColumns[spotIndex + columnIndex] == undefined) diagonalColumns[spotIndex + columnIndex] = [\n                    spot\n                ];\n            });\n        });\n        columns.reverse().forEach((row, rowIndex)=>{\n            row.forEach((spot, spotIndex)=>{\n                if (Array.isArray(diagonalRows[spotIndex + rowIndex])) return diagonalRows[spotIndex + rowIndex].push(spot);\n                else if (diagonalRows[spotIndex + rowIndex] == undefined) diagonalRows[spotIndex + rowIndex] = [\n                    spot\n                ];\n            });\n        });\n        this.alertWinner(columns);\n        this.alertWinner(rows);\n        this.alertWinner(diagonalColumns);\n        this.alertWinner(diagonalRows);\n    }\n    alertWinner(list) {\n        if (this.matchResult) return;\n        const sequence = {\n            [(0, $1720a16224a16edd$export$7108827f6df32fda).USER]: [],\n            [(0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE]: []\n        };\n        list.forEach((spots)=>{\n            spots.forEach((spot)=>{\n                if (this.matchResult) return;\n                if (spot.getState() === (0, $1720a16224a16edd$export$7108827f6df32fda).USER) {\n                    sequence[(0, $1720a16224a16edd$export$7108827f6df32fda).USER].push(spot);\n                    sequence[(0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE] = [];\n                } else if (spot.getState() === (0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE) {\n                    sequence[(0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE].push(spot);\n                    sequence[(0, $1720a16224a16edd$export$7108827f6df32fda).USER] = [];\n                } else {\n                    sequence[(0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE] = [];\n                    sequence[(0, $1720a16224a16edd$export$7108827f6df32fda).USER] = [];\n                }\n                Object.entries(sequence).forEach(([key, value])=>{\n                    if (this.matchResult) return;\n                    if (value.length >= 4) {\n                        value.forEach((s)=>s.setAsMatched());\n                        this.setMatchEnd({\n                            result: key\n                        });\n                    }\n                });\n            });\n            sequence[(0, $1720a16224a16edd$export$7108827f6df32fda).USER] = [];\n            sequence[(0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE] = [];\n        });\n    }\n    onMatchEnd(callback) {\n        this.onMatchEndCallbacks.push(callback);\n    }\n    setMatchEnd({ result: result }) {\n        this.matchResult = result;\n        this.onMatchEndCallbacks.forEach((callback)=>callback({\n                result: result\n            }));\n    }\n    newGameMatch() {\n        this.resetAllColumnsSpots();\n        this.matchResult = null;\n        this.playTurn = (0, $1720a16224a16edd$export$7108827f6df32fda).USER;\n    }\n}\n\n\n\nclass $393058654387b10d$export$bd0bf19f25da8474 {\n    constructor({ mouseAction: mouseAction, board: board }){\n        this.mouseAction = mouseAction;\n        this.board = board;\n        this.UI = {\n            userScoreElement: document.querySelector(\"#user-score-points\"),\n            machineScoreElement: document.querySelector(\"#machine-score-points\"),\n            userScoreWrapper: document.querySelector(\"#user-score-wrapper\"),\n            machineScoreWrapper: document.querySelector(\"#machine-score-wrapper\"),\n            resultModal: document.querySelector(\"#match-end-modal\"),\n            playAgainBtn: document.querySelector(\"#match-end-play-again-btn\"),\n            matchEndResult: document.querySelector(\"#match-end-result\")\n        };\n    }\n    watchPlayAgain() {\n        this.UI.playAgainBtn.addEventListener(\"click\", ()=>{\n            this.board.newGameMatch();\n            this.UI.resultModal.classList.remove(\"is-match-ended\");\n        });\n    }\n    watchMouseEvents() {\n        this.mouseAction.watch();\n        this.mouseAction.onMouseMove((...args)=>this.onMouseMove(...args));\n        this.mouseAction.onMouseOut((...args)=>this.onMouseOut(...args));\n        this.mouseAction.onMouseClick((...args)=>this.onMousClick(...args));\n    }\n    onMouseMove({ positionX: positionX, positionY: positionY }) {\n        this.board.setColumnActive({\n            positionX: positionX\n        });\n    }\n    onMouseOut() {\n        this.board.setAllColumnsInactive();\n    }\n    onMousClick({ positionX: positionX, positionY: positionY }) {\n        if (this.board.getPlayTurn() === (0, $1720a16224a16edd$export$7108827f6df32fda).USER) this.board.play({\n            whichPlayer: (0, $1720a16224a16edd$export$7108827f6df32fda).USER,\n            columnIndex: this.board.getColumnIndexByPositionX(positionX)\n        });\n    }\n    watchMatchEnd() {\n        this.board.onMatchEnd(({ result: result })=>{\n            console.log({\n                result: result\n            });\n            let userScore = +this.UI.userScoreElement.textContent;\n            let machineScore = +this.UI.machineScoreElement.textContent;\n            if (result === (0, $1720a16224a16edd$export$7108827f6df32fda).USER) {\n                userScore++;\n                this.UI.matchEndResult.textContent = \"You won!\";\n            }\n            if (result === (0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE) {\n                machineScore++;\n                this.UI.matchEndResult.textContent = \"Machine won!\";\n            }\n            if (result !== (0, $1720a16224a16edd$export$7108827f6df32fda).USER && result !== (0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE) this.UI.matchEndResult.textContent = \"Draw\";\n            this.UI.userScoreElement.textContent = userScore;\n            this.UI.machineScoreElement.textContent = machineScore;\n            this.UI.resultModal.classList.add(\"is-match-ended\");\n        });\n    }\n    watchPlayTurn() {\n        this.board.onPlayTurnChange(({ currentTurn: currentTurn })=>{\n            if (currentTurn === (0, $1720a16224a16edd$export$7108827f6df32fda).USER) {\n                this.UI.userScoreWrapper.classList.add(\"is-playing\");\n                this.UI.machineScoreWrapper.classList.remove(\"is-playing\");\n                return;\n            }\n            if (currentTurn === (0, $1720a16224a16edd$export$7108827f6df32fda).MACHINE) {\n                this.UI.machineScoreWrapper.classList.add(\"is-playing\");\n                this.UI.userScoreWrapper.classList.remove(\"is-playing\");\n                return;\n            }\n            this.UI.machineScoreWrapper.classList.remove(\"is-playing\");\n            this.UI.userScoreWrapper.classList.remove(\"is-playing\");\n        });\n    }\n}\n\n\nclass $cf9fc4ed127d4e00$export$53816a21fc9a511 {\n    mouseMoveCallbacks = [];\n    mouseOutCallbacks = [];\n    mouseClickCallbacks = [];\n    constructor({ ctx: ctx, canvas: canvas }){\n        this.ctx = ctx;\n        this.canvas = canvas;\n    }\n    watch() {\n        this.watchMouseMove();\n        this.watchMouseOut();\n        this.watchMouseClick();\n    }\n    onMouseMove(callback) {\n        this.mouseMoveCallbacks.push(callback);\n    }\n    onMouseOut(callback) {\n        this.mouseOutCallbacks.push(callback);\n    }\n    onMouseClick(callback) {\n        this.mouseClickCallbacks.push(callback);\n    }\n    watchMouseMove() {\n        this.canvas.addEventListener(\"mousemove\", (event)=>{\n            const positionX = event.offsetX;\n            const positionY = event.offsetY;\n            this.mouseMoveCallbacks.forEach((callback)=>callback({\n                    positionX: positionX,\n                    positionY: positionY\n                }));\n        });\n    }\n    watchMouseOut() {\n        this.canvas.addEventListener(\"mouseout\", (event)=>{\n            this.mouseOutCallbacks.forEach((callback)=>callback());\n        });\n    }\n    watchMouseClick() {\n        this.canvas.addEventListener(\"click\", (event)=>{\n            const positionX = event.offsetX;\n            const positionY = event.offsetY;\n            this.mouseClickCallbacks.forEach((callback)=>callback({\n                    positionX: positionX,\n                    positionY: positionY\n                }));\n        });\n    }\n}\n\n\nclass $bd7da8656820d802$export$985739bfa5723e08 {\n    player = null;\n    machine = null;\n    board = null;\n    controller = null;\n    constructor(canvas){\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n        this.board = new (0, $d78f81c7cf208403$export$dc537a3a3893548e)({\n            ctx: this.ctx,\n            width: canvas.width,\n            height: canvas.height\n        });\n        this.mouseAction = new (0, $cf9fc4ed127d4e00$export$53816a21fc9a511)({\n            ctx: this.ctx,\n            canvas: this.canvas\n        });\n        this.controller = new (0, $393058654387b10d$export$bd0bf19f25da8474)({\n            mouseAction: this.mouseAction,\n            board: this.board\n        });\n    }\n    init() {\n        window.requestAnimationFrame(()=>{\n            this.board.renderBoard();\n        });\n        this.controller.watchMouseEvents();\n        this.controller.watchMatchEnd();\n        this.controller.watchPlayTurn();\n        this.controller.watchPlayAgain();\n    }\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    new (0, $bd7da8656820d802$export$985739bfa5723e08)(document.querySelector(\"#game-canvas\")).init();\n});\n\n\n//# sourceMappingURL=index.a0390047.js.map\n","import { Game } from \"./Game\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new Game(document.querySelector(\"#game-canvas\")).init();\n});\n","import { Board } from \"./Board\";\nimport { Controller } from \"./Controller\";\nimport { MouseAction } from \"./MouseAction\";\n\nexport class Game {\n  player = null;\n  machine = null;\n  board = null;\n  controller = null;\n\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\");\n    this.board = new Board({\n      ctx: this.ctx,\n      width: canvas.width,\n      height: canvas.height,\n    });\n    this.mouseAction = new MouseAction({\n      ctx: this.ctx,\n      canvas: this.canvas,\n    });\n    this.controller = new Controller({\n      mouseAction: this.mouseAction,\n      board: this.board,\n    });\n  }\n\n  init() {\n    window.requestAnimationFrame(() => {\n      this.board.renderBoard();\n    });\n    this.controller.watchMouseEvents();\n    this.controller.watchMatchEnd();\n    this.controller.watchPlayTurn();\n    this.controller.watchPlayAgain();\n  }\n}\n","import { Column } from \"./Column\";\nimport {\n  COLUMN_COUNT,\n  PLAYERS,\n  SPOT_MARGIN,\n  SPOT_RADIUS,\n  SPOTS_PER_COLUMNS_COUNT,\n} from \"./constants\";\nimport { MachinePlayer } from \"./MachinePlayer\";\nimport { Spot } from \"./Spot\";\n\nexport class Board {\n  width = null;\n  height = null;\n  columns = [];\n  playTurn = PLAYERS.USER;\n  matchResult = null;\n\n  constructor({ ctx, width, height }) {\n    this.ctx = ctx;\n    this.width = width;\n    this.height = height;\n    this.onMatchEndCallbacks = [];\n    this.onPlayTurnChangeCallbacks = [];\n    this.machinePlayer = new MachinePlayer();\n    this.columns = Array(COLUMN_COUNT)\n      .fill(null)\n      .map(() => new Column());\n    this.fillColumnsWithSpots();\n  }\n\n  getPlayTurn() {\n    return this.playTurn;\n  }\n\n  onPlayTurnChange(callback) {\n    this.onPlayTurnChangeCallbacks.push(callback);\n  }\n\n  fillColumnsWithSpots() {\n    this.columns.forEach((col) => {\n      col.addSpots(\n        Array(SPOTS_PER_COLUMNS_COUNT)\n          .fill(null)\n          .map(() => new Spot())\n      );\n    });\n  }\n\n  getSpotPosition(index) {\n    return (\n      index * SPOT_RADIUS * 2 +\n      SPOT_RADIUS +\n      (index === 0 ? 0 : SPOT_MARGIN * index)\n    );\n  }\n\n  getColumnIndexByPositionX(positionX) {\n    const columnActiveIndex = Math.floor(\n      positionX / (this.width / COLUMN_COUNT)\n    );\n\n    return columnActiveIndex;\n  }\n\n  renderBoard() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    this.columns.forEach((col, columnIndex) => {\n      const currentSpots = col.getSpots();\n\n      currentSpots.forEach((spot, spotIndex) => {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.arc(\n          this.getSpotPosition(columnIndex),\n          this.getSpotPosition(spotIndex),\n          SPOT_RADIUS,\n          0,\n          2 * Math.PI\n        );\n\n        this.ctx.fillStyle = spot.getColor();\n\n        if (spot.getIsMatched()) {\n          this.ctx.strokeStyle = \"#000000\";\n          this.ctx.lineWidth = 4;\n          this.ctx.stroke();\n        }\n\n        this.ctx.fill();\n        this.ctx.closePath();\n        this.ctx.restore();\n      });\n    });\n\n    window.requestAnimationFrame(() => this.renderBoard());\n  }\n\n  setColumnActive({ positionX }) {\n    const columnActiveIndex = this.getColumnIndexByPositionX(positionX);\n    this.columns.forEach((column, index) => {\n      return column.getSpots().forEach((spot) => {\n        if (\n          index === columnActiveIndex &&\n          !spot.hasOwner() &&\n          this.getPlayTurn() === PLAYERS.USER &&\n          !this.matchResult\n        ) {\n          return spot.preActivate();\n        }\n\n        if (!spot.hasOwner()) {\n          spot.inactivate();\n        }\n      });\n    });\n  }\n\n  setAllColumnsInactive() {\n    this.columns.forEach((column) => {\n      column.getSpots().forEach((spot) => {\n        if (!spot.hasOwner()) {\n          spot.inactivate();\n        }\n      });\n    });\n  }\n\n  resetAllColumnsSpots() {\n    this.columns.forEach((column) => {\n      column.getSpots().forEach((spot) => {\n        spot.inactivate();\n      });\n    });\n  }\n\n  setNextPlayerTurn({ currentPlayer }) {\n    this.playTurn =\n      currentPlayer === PLAYERS.USER ? PLAYERS.MACHINE : PLAYERS.USER;\n\n    this.onPlayTurnChangeCallbacks.forEach((callback) =>\n      callback({ currentTurn: this.playTurn })\n    );\n  }\n\n  play({ whichPlayer, columnIndex }) {\n    if (this.matchResult) return;\n\n    const availableSpot = this.columns[columnIndex]\n      .getSpots()\n      .findLast((spot) => !spot.hasOwner());\n\n    if (!availableSpot) {\n      throw Error(\"Cannot play in this column.\");\n    }\n\n    availableSpot.setOwnedBy(whichPlayer);\n    this.findWinnerMatch();\n    this.setNextPlayerTurn({ currentPlayer: whichPlayer });\n    window.setTimeout(() => this.maybeMachinePlay(), 1500);\n  }\n\n  maybeMachinePlay() {\n    if (this.getPlayTurn() === PLAYERS.MACHINE && !this.matchResult) {\n      this.play({\n        whichPlayer: PLAYERS.MACHINE,\n        columnIndex: this.machinePlayer.getColumnIndexToPlayIn(this.columns),\n      });\n    }\n  }\n\n  findWinnerMatch() {\n    const columns = [];\n    const rows = [];\n    const diagonalColumns = [];\n    const diagonalRows = [];\n\n    this.columns.forEach((column) => {\n      const spotsForColumn = column.getSpots();\n      columns.push(spotsForColumn);\n\n      spotsForColumn.forEach((spot, spotIndex) => {\n        if (Array.isArray(rows[spotIndex])) {\n          return rows[spotIndex].push(spot);\n        }\n        rows[spotIndex] = [spot];\n      });\n    });\n\n    columns.forEach((column, columnIndex) => {\n      column.forEach((spot, spotIndex) => {\n        if (Array.isArray(diagonalColumns[spotIndex + columnIndex])) {\n          return diagonalColumns[spotIndex + columnIndex].push(spot);\n        } else if (diagonalColumns[spotIndex + columnIndex] == undefined) {\n          diagonalColumns[spotIndex + columnIndex] = [spot];\n        }\n      });\n    });\n\n    columns.reverse().forEach((row, rowIndex) => {\n      row.forEach((spot, spotIndex) => {\n        if (Array.isArray(diagonalRows[spotIndex + rowIndex])) {\n          return diagonalRows[spotIndex + rowIndex].push(spot);\n        } else if (diagonalRows[spotIndex + rowIndex] == undefined) {\n          diagonalRows[spotIndex + rowIndex] = [spot];\n        }\n      });\n    });\n\n    this.alertWinner(columns);\n    this.alertWinner(rows);\n    this.alertWinner(diagonalColumns);\n    this.alertWinner(diagonalRows);\n  }\n\n  alertWinner(list) {\n    if (this.matchResult) return;\n\n    const sequence = {\n      [PLAYERS.USER]: [],\n      [PLAYERS.MACHINE]: [],\n    };\n\n    list.forEach((spots) => {\n      spots.forEach((spot) => {\n        if (this.matchResult) return;\n\n        if (spot.getState() === PLAYERS.USER) {\n          sequence[PLAYERS.USER].push(spot);\n          sequence[PLAYERS.MACHINE] = [];\n        } else if (spot.getState() === PLAYERS.MACHINE) {\n          sequence[PLAYERS.MACHINE].push(spot);\n          sequence[PLAYERS.USER] = [];\n        } else {\n          sequence[PLAYERS.MACHINE] = [];\n          sequence[PLAYERS.USER] = [];\n        }\n\n        Object.entries(sequence).forEach(([key, value]) => {\n          if (this.matchResult) return;\n\n          if (value.length >= 4) {\n            value.forEach((s) => s.setAsMatched());\n            this.setMatchEnd({ result: key });\n          }\n        });\n      });\n\n      sequence[PLAYERS.USER] = [];\n      sequence[PLAYERS.MACHINE] = [];\n    });\n  }\n\n  onMatchEnd(callback) {\n    this.onMatchEndCallbacks.push(callback);\n  }\n\n  setMatchEnd({ result }) {\n    this.matchResult = result;\n    this.onMatchEndCallbacks.forEach((callback) => callback({ result }));\n  }\n\n  newGameMatch() {\n    this.resetAllColumnsSpots();\n    this.matchResult = null;\n    this.playTurn = PLAYERS.USER;\n  }\n}\n","import { SPOTS_PER_COLUMNS_COUNT } from \"./constants\";\n\nexport class Column {\n  spots = [];\n\n  addSpots(spots) {\n    if (spots.length === SPOTS_PER_COLUMNS_COUNT) {\n      this.spots = spots;\n      return;\n    }\n\n    throw new Error(\n      `Spots should be equal to ${SPOTS_PER_COLUMNS_COUNT}. It was given ${spots.length}`\n    );\n  }\n\n  getSpots() {\n    return this.spots;\n  }\n\n  hasAvailableSpot() {\n    return this.spots.some((spot) => !spot.hasOwner());\n  }\n}\n","export const SPOTS_PER_COLUMNS_COUNT = 6;\nexport const COLUMN_COUNT = 7;\nexport const SPOT_RADIUS = 87 / 2;\nexport const SPOT_MARGIN = 8;\n\nexport const PLAYERS = {\n  USER: \"user\",\n  MACHINE: \"machine\",\n};\n","export class MachinePlayer {\n  getColumnIndexToPlayIn(boardColumnsState) {\n    const bestDefensiveMoves =\n      this._processBestDefensiveMoves(boardColumnsState);\n    return this._calculateColumnIndextoPlayIn({\n      boardColumnsState,\n      bestDefensiveMoves,\n    });\n  }\n\n  _getColumnIndexesPossibleToPlay(boardColumnsState) {\n    return boardColumnsState.reduce((availableIndexes, column, index) => {\n      const available = column.hasAvailableSpot() ? [index] : [];\n      return [...availableIndexes, ...available];\n    }, []);\n  }\n\n  _calculateColumnIndextoPlayIn({ boardColumnsState, bestDefensiveMoves }) {\n    const columnIndexesAvailable =\n      this._getColumnIndexesPossibleToPlay(boardColumnsState);\n\n    const randomPosition =\n      columnIndexesAvailable[\n        Math.round(Math.random() * (columnIndexesAvailable.length - 1))\n      ];\n\n    const bestDefensiveSingleMove =\n      bestDefensiveMoves.length > 0 &&\n      bestDefensiveMoves.reduce((bestMove, currentMove) => {\n        return bestMove?.sequence > currentMove.sequence\n          ? bestMove\n          : currentMove;\n      });\n\n    return bestDefensiveSingleMove\n      ? bestDefensiveSingleMove.chosenMoveToColumnIndex\n      : randomPosition;\n  }\n\n  _processBestDefensiveMoves(boardColumnsState) {\n    const opponentColumnSequences = [];\n\n    boardColumnsState.forEach((column, columnIndex) => {\n      const hasAvailableSpot = column.hasAvailableSpot();\n\n      if (hasAvailableSpot) {\n        const spotsOrderedDownToTop = [...column.getSpots()].reverse();\n        let currentSequence = 0;\n\n        spotsOrderedDownToTop.forEach((spot) => {\n          const isOpponentSpot = spot.isPlayerOwner();\n          const hasOwner = spot.hasOwner();\n\n          if (isOpponentSpot) {\n            currentSequence++;\n          } else if (!hasOwner && currentSequence > 1) {\n            opponentColumnSequences.push({\n              sequence: currentSequence,\n              chosenMoveToColumnIndex: columnIndex,\n            });\n            currentSequence = 0;\n          } else {\n            currentSequence = 0;\n          }\n        });\n      }\n    });\n\n    function getRowSequence(reversed = false) {\n      const opponentRowSequences = [];\n      getBoardRows(boardColumnsState).forEach((row, rowIndex, allRows) => {\n        const hasAvailableSpot = row.some((spot) => !spot.hasOwner());\n\n        if (hasAvailableSpot) {\n          const previousRow = rowIndex > 0 ? allRows[rowIndex - 1] : undefined;\n\n          const spotsOnRow = reversed ? [...row].reverse() : row;\n          let currentSequence = 0;\n\n          spotsOnRow.forEach((spot, spotIndex, allSpots) => {\n            const isOpponentSpot = spot.isPlayerOwner();\n            const hasOwner = spot.hasOwner();\n\n            const reversedSpotIndex = allSpots.length - 1 - spotIndex;\n            const spotBellowHasOwner = previousRow\n              ? previousRow[reversed ? reversedSpotIndex : spotIndex].hasOwner()\n              : true;\n\n            if (isOpponentSpot) {\n              currentSequence++;\n            } else if (!hasOwner && currentSequence > 1 && spotBellowHasOwner) {\n              opponentRowSequences.push({\n                sequence: currentSequence,\n                chosenMoveToColumnIndex: reversed\n                  ? reversedSpotIndex\n                  : spotIndex,\n              });\n              currentSequence = 0;\n            } else {\n              currentSequence = 0;\n            }\n          });\n        }\n      });\n\n      return opponentRowSequences;\n    }\n\n    console.log({\n      columns: opponentColumnSequences,\n      rows: getRowSequence(),\n      rowsReversed: getRowSequence(true),\n    });\n\n    return [\n      ...opponentColumnSequences,\n      ...getRowSequence(),\n      ...getRowSequence(true),\n    ];\n  }\n}\n\nfunction getBoardRows(boardColumnsState) {\n  const rows = [];\n\n  boardColumnsState.forEach((column) => {\n    const spotsForColumn = column.getSpots();\n\n    spotsForColumn.forEach((spot, spotIndex) => {\n      if (Array.isArray(rows[spotIndex])) {\n        return rows[spotIndex].push(spot);\n      }\n      rows[spotIndex] = [spot];\n    });\n  });\n\n  return rows.reverse();\n}\n","import { PLAYERS } from \"./constants\";\n\nexport class Spot {\n  state = SpotStates.EMPTY;\n  isMatched = false;\n\n  getState() {\n    return this.state;\n  }\n\n  getIsMatched() {\n    return this.isMatched;\n  }\n\n  getColor() {\n    return SpotStatesColor[this.state];\n  }\n\n  preActivate() {\n    this.state = SpotStates.PLAYER_PREACTIVE;\n  }\n\n  inactivate() {\n    this.state = SpotStates.EMPTY;\n    this.isMatched = false;\n  }\n\n  setAsMatched() {\n    this.isMatched = true;\n  }\n\n  setOwnedBy(whichPlayer) {\n    this.state = whichPlayer;\n  }\n\n  hasOwner() {\n    return (\n      this.state === SpotStates.PLAYER || this.state === SpotStates.MACHINE\n    );\n  }\n\n  isPlayerOwner() {\n    return this.getState() === SpotStates.PLAYER;\n  }\n}\n\nexport const SpotStates = {\n  EMPTY: \"empty\",\n  PLAYER: PLAYERS.USER,\n  MACHINE: PLAYERS.MACHINE,\n  PLAYER_PREACTIVE: \"player_preactive\",\n  MACHINE_PREACTIVE: \"machine_preactive\",\n};\n\nexport const SpotStatesColor = {\n  [SpotStates.EMPTY]: \"#c3c3c3\",\n  [SpotStates.PLAYER]: \"#FF9F1C\",\n  [SpotStates.MACHINE]: \"#E71D36\",\n  [SpotStates.PLAYER_PREACTIVE]: \"#FFD192\",\n  [SpotStates.MACHINE_PREACTIVE]: \"#FF94A1\",\n};\n","import { PLAYERS } from \"./constants\";\n\nexport class Controller {\n  constructor({ mouseAction, board }) {\n    this.mouseAction = mouseAction;\n    this.board = board;\n    this.UI = {\n      userScoreElement: document.querySelector(\"#user-score-points\"),\n      machineScoreElement: document.querySelector(\"#machine-score-points\"),\n      userScoreWrapper: document.querySelector(\"#user-score-wrapper\"),\n      machineScoreWrapper: document.querySelector(\"#machine-score-wrapper\"),\n      resultModal: document.querySelector(\"#match-end-modal\"),\n      playAgainBtn: document.querySelector(\"#match-end-play-again-btn\"),\n      matchEndResult: document.querySelector(\"#match-end-result\"),\n    };\n  }\n\n  watchPlayAgain() {\n    this.UI.playAgainBtn.addEventListener(\"click\", () => {\n      this.board.newGameMatch();\n      this.UI.resultModal.classList.remove(\"is-match-ended\");\n    });\n  }\n\n  watchMouseEvents() {\n    this.mouseAction.watch();\n    this.mouseAction.onMouseMove((...args) => this.onMouseMove(...args));\n    this.mouseAction.onMouseOut((...args) => this.onMouseOut(...args));\n    this.mouseAction.onMouseClick((...args) => this.onMousClick(...args));\n  }\n\n  onMouseMove({ positionX, positionY }) {\n    this.board.setColumnActive({ positionX });\n  }\n\n  onMouseOut() {\n    this.board.setAllColumnsInactive();\n  }\n\n  onMousClick({ positionX, positionY }) {\n    if (this.board.getPlayTurn() === PLAYERS.USER) {\n      this.board.play({\n        whichPlayer: PLAYERS.USER,\n        columnIndex: this.board.getColumnIndexByPositionX(positionX),\n      });\n    }\n  }\n\n  watchMatchEnd() {\n    this.board.onMatchEnd(({ result }) => {\n      console.log({ result });\n      let userScore = +this.UI.userScoreElement.textContent;\n      let machineScore = +this.UI.machineScoreElement.textContent;\n\n      if (result === PLAYERS.USER) {\n        userScore++;\n        this.UI.matchEndResult.textContent = \"You won!\";\n      }\n\n      if (result === PLAYERS.MACHINE) {\n        machineScore++;\n        this.UI.matchEndResult.textContent = \"Machine won!\";\n      }\n\n      if (result !== PLAYERS.USER && result !== PLAYERS.MACHINE) {\n        this.UI.matchEndResult.textContent = \"Draw\";\n      }\n\n      this.UI.userScoreElement.textContent = userScore;\n      this.UI.machineScoreElement.textContent = machineScore;\n      this.UI.resultModal.classList.add(\"is-match-ended\");\n    });\n  }\n\n  watchPlayTurn() {\n    this.board.onPlayTurnChange(({ currentTurn }) => {\n      if (currentTurn === PLAYERS.USER) {\n        this.UI.userScoreWrapper.classList.add(\"is-playing\");\n        this.UI.machineScoreWrapper.classList.remove(\"is-playing\");\n\n        return;\n      }\n\n      if (currentTurn === PLAYERS.MACHINE) {\n        this.UI.machineScoreWrapper.classList.add(\"is-playing\");\n        this.UI.userScoreWrapper.classList.remove(\"is-playing\");\n\n        return;\n      }\n\n      this.UI.machineScoreWrapper.classList.remove(\"is-playing\");\n      this.UI.userScoreWrapper.classList.remove(\"is-playing\");\n    });\n  }\n}\n","export class MouseAction {\n  mouseMoveCallbacks = [];\n  mouseOutCallbacks = [];\n  mouseClickCallbacks = [];\n\n  constructor({ ctx, canvas }) {\n    this.ctx = ctx;\n    this.canvas = canvas;\n  }\n\n  watch() {\n    this.watchMouseMove();\n    this.watchMouseOut();\n    this.watchMouseClick();\n  }\n\n  onMouseMove(callback) {\n    this.mouseMoveCallbacks.push(callback);\n  }\n\n  onMouseOut(callback) {\n    this.mouseOutCallbacks.push(callback);\n  }\n\n  onMouseClick(callback) {\n    this.mouseClickCallbacks.push(callback);\n  }\n\n  watchMouseMove() {\n    this.canvas.addEventListener(\"mousemove\", (event) => {\n      const positionX = event.offsetX;\n      const positionY = event.offsetY;\n\n      this.mouseMoveCallbacks.forEach((callback) =>\n        callback({ positionX, positionY })\n      );\n    });\n  }\n\n  watchMouseOut() {\n    this.canvas.addEventListener(\"mouseout\", (event) => {\n      this.mouseOutCallbacks.forEach((callback) => callback());\n    });\n  }\n\n  watchMouseClick() {\n    this.canvas.addEventListener(\"click\", (event) => {\n      const positionX = event.offsetX;\n      const positionY = event.offsetY;\n\n      this.mouseClickCallbacks.forEach((callback) =>\n        callback({ positionX, positionY })\n      );\n    });\n  }\n}\n"],"names":["$1720a16224a16edd$export$7108827f6df32fda","USER","MACHINE","$73826244d9832cf4$export$816b5d811295e6bc","spots","addSpots","length","Error","getSpots","hasAvailableSpot","some","spot","hasOwner","$6997156f6ef9e35c$export$276a2e77c48b6cc8","getColumnIndexToPlayIn","boardColumnsState","bestDefensiveMoves","_processBestDefensiveMoves","_calculateColumnIndextoPlayIn","_getColumnIndexesPossibleToPlay","reduce","availableIndexes","column","index","columnIndexesAvailable","randomPosition","Math","round","random","bestDefensiveSingleMove","bestMove","currentMove","sequence","chosenMoveToColumnIndex","opponentColumnSequences","getRowSequence","reversed","opponentRowSequences","$6997156f6ef9e35c$var$getBoardRows","rows","forEach","spotsForColumn","spotIndex","Array","isArray","push","reverse","row","rowIndex","allRows","previousRow","undefined","spotsOnRow","currentSequence","allSpots","isOpponentSpot","isPlayerOwner","reversedSpotIndex","spotBellowHasOwner","columnIndex","spotsOrderedDownToTop","console","log","columns","rowsReversed","$9be380de04799806$export$4ff9fa6d345bfd0b","state","$9be380de04799806$export$f242c4d601bf30ed","EMPTY","isMatched","getState","getIsMatched","getColor","$9be380de04799806$export$b45ddc5a8abfe90d","preActivate","PLAYER_PREACTIVE","inactivate","setAsMatched","setOwnedBy","whichPlayer","PLAYER","MACHINE_PREACTIVE","$d78f81c7cf208403$export$dc537a3a3893548e","width","height","playTurn","matchResult","constructor","ctx","onMatchEndCallbacks","onPlayTurnChangeCallbacks","machinePlayer","fill","map","fillColumnsWithSpots","getPlayTurn","onPlayTurnChange","callback","col","getSpotPosition","getColumnIndexByPositionX","positionX","floor","renderBoard","clearRect","currentSpots","save","beginPath","arc","PI","fillStyle","strokeStyle","lineWidth","stroke","closePath","restore","window","requestAnimationFrame","setColumnActive","columnActiveIndex","setAllColumnsInactive","resetAllColumnsSpots","setNextPlayerTurn","currentPlayer","currentTurn","play","availableSpot","findLast","findWinnerMatch","setTimeout","maybeMachinePlay","diagonalColumns","diagonalRows","alertWinner","list","Object","entries","key","value","s","setMatchEnd","result","onMatchEnd","newGameMatch","$393058654387b10d$export$bd0bf19f25da8474","mouseAction","board","UI","userScoreElement","document","querySelector","machineScoreElement","userScoreWrapper","machineScoreWrapper","resultModal","playAgainBtn","matchEndResult","watchPlayAgain","addEventListener","classList","remove","watchMouseEvents","watch","onMouseMove","args","onMouseOut","onMouseClick","onMousClick","positionY","watchMatchEnd","userScore","textContent","machineScore","add","watchPlayTurn","$cf9fc4ed127d4e00$export$53816a21fc9a511","mouseMoveCallbacks","mouseOutCallbacks","mouseClickCallbacks","canvas","watchMouseMove","watchMouseOut","watchMouseClick","event","offsetX","offsetY","$bd7da8656820d802$export$985739bfa5723e08","player","machine","controller","getContext","init"],"version":3,"file":"index.a0390047.js.map"}